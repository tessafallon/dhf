/*
 * Since the mediaobject is not available in this context we have to assume the target
 * has been set by an earlier call to define post_path. This is sort of an ugly kludge
 * since it is leaky but works for a first cut.
 *
 * Another important note is that right now it assumes you want to go back to the
 * structural view. This is sort of brittle if you change up the workflow or want to
 * reorder directly from the file upload page.
 */
	  $('.sortable').sortable({ 
			disabled: false,
			update: function(e, ui) {
				var ordered_master_files = [];
				/*
				 * To provide the right order look at each row in the table and cherry
				 * pick the segments. This is a bit faster than going through the 
				 * entire DOM seeking for a class and retains some structure in the
				 * markup as well.
				 *
				 * For more information on using HTML5 data attributes check out
				 * http://html5doctor.com/html5-custom-data-attributes/
				 */
				$(this).find('tr').each(function(){
				  ordered_master_files.push($(this).data('segment'));
				});
                $('#ajax_confirmation').removeClass('hidden');
                
				$.ajax({
					data: { _method: 'update', 
					  masterfile_ids: ordered_master_files, 
					  step: 'structure', 
					  format: 'json' },
				    success: function(data) { 
				      $('#ajax_confirmation').addClass('hidden') },
 					type: 'PUT',
					url: post_path,
		       })
		   }
	  }).disableSelection().css('cursor', 'move');
  
    $(".sortable").nestedSortable({
      forcePlaceholderSize:true,
      handle: 'div',
      helper: 'clone',
      listType: 'tbody',
      items: 'tr',
      opacity: .6,
      revert: 250,
      tabSize: 25,
      tolerance: 'pointer',
      toleranceElement: '> div'
    }).disableSelection();
        
